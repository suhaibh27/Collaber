{"version":3,"sources":["./src/app/sign-in/sign-in.module.ts","./src/app/sign-in/sign-in.page.html","./src/app/sign-in/sign-in.page.ts","./src/app/sign-in/sign-in.page.scss","./src/app/sign-in/sign-in-routing.module.ts","./src/app/validators/password.validator.ts"],"names":[],"mappings":"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","file":"sign-in-sign-in-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { SignInPageRoutingModule } from './sign-in-routing.module';\n\nimport { SignInPage } from './sign-in.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    SignInPageRoutingModule\n  ],\n  declarations: [SignInPage]\n})\nexport class SignInPageModule {}\n","export default \"<ion-header >\\r\\n  <ion-toolbar class=\\\"myBackgroundColor\\\">\\r\\n    <ion-title color=\\\"light\\\">Register</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content>\\r\\n  <div class=\\\"login-content\\\">\\r\\n    <h1 class=\\\"Title\\\" >Collaber</h1>\\r\\n    <!-- Logo -->\\r\\n    <ion-img class=\\\"mImage\\\" src=\\\"..\\\\..\\\\assets\\\\icon\\\\logo.jpeg\\\"></ion-img>\\r\\n    <!-- Login form -->\\r\\n    <div *ngIf=\\\"login\\\">\\r\\n      <form>\\r\\n        <ion-item>\\r\\n          <ion-label>\\r\\n            <ion-icon name=\\\"mail\\\"></ion-icon>\\r\\n            Email\\r\\n          </ion-label>\\r\\n          <ion-input [(ngModel)]='signInEmail' name='email' type=\\\"text\\\"></ion-input>\\r\\n        </ion-item>\\r\\n      <br>\\r\\n        <ion-item>\\r\\n          <ion-label >\\r\\n            <ion-icon name=\\\"lock-closed\\\"></ion-icon>\\r\\n                          Password\\r\\n          </ion-label>\\r\\n          <ion-input [(ngModel)]='signInPassword' name='password'  type=\\\"password\\\"></ion-input>\\r\\n        </ion-item>\\r\\n      </form>\\r\\n      <br>\\r\\n      <div class=\\\"centerDev\\\">\\r\\n        <ion-button class=\\\"myBackgroundColor\\\" (click)=\\\"signIn()\\\">\\r\\n        <ion-icon name=\\\"log-in\\\" ></ion-icon>\\r\\n            SIGN IN\\r\\n        </ion-button>\\r\\n        <div class=\\\"ion-margin\\\" style='text-align-last: center;'>\\r\\n          <ion-text color='danger'>{{signInError}}</ion-text>\\r\\n        </div>\\r\\n        <br>\\r\\n        <ion-label class=\\\"link\\\">Forgot Password?</ion-label>\\r\\n        <p ion-text color=\\\"secondary\\\" >New here? <a (click)=\\\"toggleRegisterForm()\\\">Sign Up</a></p>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <!-- Sign Up Form -->\\r\\n    <div *ngIf=\\\"!login\\\">\\r\\n      <form [formGroup]=\\\"signUpForm\\\" (ngSubmit)=\\\"checkDup(signUpForm)\\\">\\r\\n        <ion-item>\\r\\n          <ion-label position=\\\"floating\\\">\\r\\n            Email\\r\\n          </ion-label>\\r\\n          <ion-input [(ngModel)]='email' formControlName=\\\"email\\\" type=\\\"email\\\"></ion-input>\\r\\n        </ion-item>\\r\\n        <div class=\\\"validation-errors\\\">\\r\\n          <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\r\\n            <div class=\\\"error-message\\\" *ngIf=\\\"signUpForm.get('email').hasError(validation.type) && (signUpForm.get('email').dirty || signUpForm.get('email').touched)\\\">\\r\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\r\\n            </div>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n        <ion-item>\\r\\n          <ion-label position=\\\"floating\\\">\\r\\n            Username\\r\\n          </ion-label>\\r\\n          <ion-input [(ngModel)]='username' formControlName=\\\"username\\\" type=\\\"text\\\"></ion-input>\\r\\n        </ion-item>\\r\\n        <div class=\\\"validation-errors\\\">\\r\\n          <ng-container *ngFor=\\\"let validation of validation_messages.username\\\">\\r\\n            <div class=\\\"error-message\\\" *ngIf=\\\"signUpForm.get('username').hasError(validation.type) && (signUpForm.get('username').dirty || signUpForm.get('username').touched)\\\">\\r\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\r\\n            </div>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n        <br>\\r\\n        <ion-item>\\r\\n          <ion-label position=\\\"floating\\\" >\\r\\n            Name\\r\\n          </ion-label>\\r\\n          <ion-input [(ngModel)]='name' formControlName=\\\"name\\\"></ion-input>\\r\\n        </ion-item>\\r\\n        <div class=\\\"validation-errors\\\">\\r\\n          <ng-container *ngFor=\\\"let validation of validation_messages.name\\\">\\r\\n            <div class=\\\"error-message\\\" *ngIf=\\\"signUpForm.get('name').hasError(validation.type) && (signUpForm.get('name').dirty || signUpForm.get('name').touched)\\\">\\r\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\r\\n            </div>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n        <br>\\r\\n        <div formGroupName=\\\"matching_passwords\\\">\\r\\n          <ion-item>\\r\\n            <ion-label position=\\\"floating\\\" >Password</ion-label>\\r\\n            <ion-input [(ngModel)]='password' type=\\\"password\\\" formControlName=\\\"password\\\"></ion-input>\\r\\n          </ion-item>\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\r\\n              <div class=\\\"error-message\\\" *ngIf=\\\"signUpForm.get('matching_passwords').get('password').hasError(validation.type) && (signUpForm.get('matching_passwords').get('password').dirty || signUpForm.get('matching_passwords').get('password').touched)\\\">\\r\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n          </div>\\r\\n          <br>\\r\\n          <ion-item style=\\\"--highlight-color-valid: none;\\\">\\r\\n            <ion-label position=\\\"floating\\\">Confirm Password</ion-label>\\r\\n            <ion-input type=\\\"password\\\" formControlName=\\\"confirm_password\\\"></ion-input>\\r\\n          </ion-item>\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validation_messages.confirm_password\\\">\\r\\n              <div class=\\\"error-message\\\" *ngIf=\\\"signUpForm.get('matching_passwords').get('confirm_password').hasError(validation.type) && (signUpForm.get('matching_passwords').get('confirm_password').dirty || signUpForm.get('matching_passwords').get('confirm_password').touched)\\\">\\r\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"validation-errors\\\">\\r\\n          <ng-container *ngFor=\\\"let validation of validation_messages.matching_passwords\\\">\\r\\n            <div class=\\\"error-message\\\" *ngIf=\\\"signUpForm.get('matching_passwords').hasError(validation.type) && (signUpForm.get('matching_passwords').get('confirm_password').dirty || signUpForm.get('matching_passwords').get('confirm_password').touched)\\\">\\r\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\r\\n            </div>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n        <br>\\r\\n        <ion-item >\\r\\n        <ion-label position=\\\"floating\\\"> Phone Number</ion-label>\\r\\n          <ion-input [(ngModel)]='phone' formControlName=\\\"phone\\\"></ion-input>\\r\\n        </ion-item>\\r\\n        <div class=\\\"validation-errors\\\">\\r\\n          <ng-container *ngFor=\\\"let validation of validation_messages.phone\\\">\\r\\n            <div class=\\\"error-message\\\" *ngIf=\\\"signUpForm.get('phone').hasError(validation.type) && (signUpForm.get('phone').dirty || signUpForm.get('phone').touched)\\\">\\r\\n              <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\r\\n              <br>\\r\\n            </div>\\r\\n          </ng-container>\\r\\n        </div>\\r\\n          <div class=\\\"centerDev\\\">\\r\\n            <ion-button class=\\\"myBackgroundColor\\\" type=\\\"submit\\\">\\r\\n              <ion-icon name=\\\"log-in\\\"></ion-icon>\\r\\n                  SIGN UP\\r\\n              </ion-button>\\r\\n          </div>\\r\\n          <div class=\\\"ion-margin\\\" style='text-align-last: center;'>\\r\\n            <ion-text color='danger'>{{error}}</ion-text>\\r\\n          </div>\\r\\n      </form>\\r\\n      <div class=\\\"centerDev\\\">\\r\\n        <p ion-text color=\\\"secondary\\\"  >Already have an Account?</p>\\r\\n        <ion-button fill=\\\"clear\\\" (click)=\\\"toggleRegisterForm()\\\"  shape=\\\"round\\\">\\r\\n          Sign In\\r\\n        </ion-button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</ion-content>\\r\\n\";","/* eslint-disable no-var */\n/* eslint-disable max-len */\nimport { ToastController } from '@ionic/angular';\n/* eslint-disable eqeqeq */\nimport { UsersService } from './../users.service';\n/* eslint-disable arrow-body-style */\n/* eslint-disable @typescript-eslint/quotes */\n/* eslint-disable @typescript-eslint/naming-convention */\n/* eslint-disable @typescript-eslint/member-delimiter-style */\nimport { PasswordValidator } from '../validators/password.validator';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ViewChild } from '@angular/core';\nimport { Validators, FormBuilder, FormGroup, FormControl } from '@angular/forms';\n\ninterface user {\n  // eslint-disable-next-line @typescript-eslint/member-delimiter-style\n  phoneNumber: number\n  username: string,\n\n\n}\n@Component({\n  selector: 'app-sign-in',\n  templateUrl: './sign-in.page.html',\n  styleUrls: ['./sign-in.page.scss'],\n})\n\nexport class SignInPage implements OnInit {\n  validation_messages = {\n    username: [\n      { type: 'required', message: 'Username is required.' },\n      { type: 'minlength', message: 'Username must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Username cannot be more than 25 characters long.' },\n      { type: 'pattern', message: 'use only letters, number \"_\", \".\" _ and . cannot be at start or the end' },\n      { type: 'validUsername', message: 'Your username has already been taken.' }\n    ],\n    password: [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 8 characters long.' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number.' }\n    ],\n    confirm_password: [\n      { type: 'required', message: 'Confirm password is required.' }\n    ],\n    matching_passwords: [\n      { type: 'areEqual', message: 'Password mismatch.' }\n    ],\n    name: [\n      { type: 'pattern', message: 'only letters are accepted.' },\n      {type: 'required', message: 'name is Required' }\n    ],\n    phone: [\n      { type: 'required', message: 'Phone is required.' },\n      { type: 'pattern', message: 'only numbers are accepted.' }\n    ],\n    email:[{type: 'required',message:'Email is required.'},\n          {type: 'pattern', message: 'not a valid Email form.' }\n    ]\n};\n  public login=true;\n  signUpForm: FormGroup;\n  matching_passwords_group: FormGroup;\n  email;\n  username;\n  password;\n  phone;\n  name;\n  error='';\n  signInEmail;\n  signInPassword;\n  signInError;\n  constructor(private toastController: ToastController, public userSrv: UsersService, public router: Router,public formbuilder: FormBuilder) {\n    }\n  toggleRegisterForm(){\n    this.login=((this.login) ?false:true);\n  }\n  signIn(){\n    this.signInError='';\n    this.userSrv.signIn({email:this.signInEmail,password:this.signInPassword}).then(()=>this.presentToast()).catch(er=>this.signInError=er.message);\n  }\n  async presentToast() {\n    const toast = await this.toastController.create({\n      message: 'Successful :).',\n      duration: 1500,\n    });\n    toast.present();\n\n  }\n  checkDup(val){\n    this.error='';\n    if(val.status=='VALID'){\n      var mUser;\n      this.userSrv.checkDuplicate().subscribe(res=>res.forEach(user=>{mUser=user.data();if(mUser.username==this.username){this.error='username is already taken';}else{this.signUp();};}));\n  }}\n  signUp(){\n    this.error='';\n    this.userSrv.signup({email: this.email,\n                        password: this.password,\n                        name: this.name,\n                        usrname: this.username,\n                        phone: this.phone}).catch(er=>console.log(this.error=er.message));\n  }\n\n  ngOnInit() {\n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(8),\n        Validators.required,\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ])),\n      confirm_password: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    },\n    );\n    this.signUpForm = this.formbuilder.group({\n      username: new FormControl('', Validators.compose([\n        Validators.maxLength(25),\n        Validators.minLength(5),\n        Validators.pattern('^(?![_.])(?!.*[_.]{2})[a-zA-Z0-9._]+(?<![_.])$'),\n        Validators.required\n      ])),\n      phone: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[0-9]*$')\n      ])),\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\\\.[A-Za-z0-9]+)*(\\\\.[A-Za-z]{2,})$')\n      ])),\n      name: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z \\s]*$')\n      ])),\n      matching_passwords: this.matching_passwords_group,\n  });\n  }\n}\n","export default \".Title {\\n  text-align: center;\\n  color: #000f50;\\n  font-variant-caps: small-caps;\\n  font-size: 40px;\\n}\\n\\n.link {\\n  color: blue;\\n}\\n\\n.centerDev {\\n  text-align-last: center;\\n}\\n\\n.mImage {\\n  width: 70%;\\n  height: 100px;\\n  display: block;\\n  margin-left: auto;\\n  margin-right: auto;\\n}\\n\\n.error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px;\\n}\\n\\n.submit-btn {\\n  margin: 48px 12px 12px;\\n}\\n\\n.myBackgroundColor {\\n  --background: #000f50;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXHNpZ24taW4ucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0Usa0JBQWtCO0VBQ2xCLGNBQWM7RUFDZCw2QkFBNkI7RUFDN0IsZUFBZTtBQUNqQjs7QUFDQTtFQUNFLFdBQVc7QUFFYjs7QUFBQTtFQUNFLHVCQUF1QjtBQUd6Qjs7QUFEQTtFQUNJLFVBQVU7RUFDVixhQUFhO0VBQ2IsY0FBYztFQUNkLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFJdEI7O0FBRkE7RUFFSSxVQUFVO0VBQ1YsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFJcEI7O0FBRkU7RUFDRSxzQkFBc0I7QUFLMUI7O0FBSEU7RUFDRSxxQkFBYTtBQU1qQiIsImZpbGUiOiJzaWduLWluLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5UaXRsZXtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgY29sb3I6ICMwMDBmNTA7XHJcbiAgZm9udC12YXJpYW50LWNhcHM6IHNtYWxsLWNhcHM7XHJcbiAgZm9udC1zaXplOiA0MHB4O1xyXG59XHJcbi5saW5re1xyXG4gIGNvbG9yOiBibHVlO1xyXG59XHJcbi5jZW50ZXJEZXZ7XHJcbiAgdGV4dC1hbGlnbi1sYXN0OiBjZW50ZXI7XHJcbn1cclxuLm1JbWFnZXtcclxuICAgIHdpZHRoOiA3MCU7XHJcbiAgICBoZWlnaHQ6IDEwMHB4O1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcclxuICAgIG1hcmdpbi1yaWdodDogYXV0bztcclxufVxyXG4uZXJyb3ItbWVzc2FnZVxyXG4gIHtcclxuICAgIGNvbG9yOiByZWQ7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcclxuICAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgfVxyXG4gIC5zdWJtaXQtYnRuIHtcclxuICAgIG1hcmdpbjogNDhweCAxMnB4IDEycHg7XHJcbiAgfVxyXG4gIC5teUJhY2tncm91bmRDb2xvcntcclxuICAgIC0tYmFja2dyb3VuZDogIzAwMGY1MDtcclxuICB9XHJcbiJdfQ== */\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SignInPage } from './sign-in.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SignInPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SignInPageRoutingModule {}\n","/* eslint-disable eqeqeq */\r\n/* eslint-disable @typescript-eslint/semi */\r\n/* eslint-disable @typescript-eslint/consistent-type-assertions */\r\n/* eslint-disable prefer-const */\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\n\r\nexport class PasswordValidator {\r\n\r\n  // Inspired on: http://plnkr.co/edit/Zcbg2T3tOxYmhxs7vaAm?p=preview\r\n  static areEqual(formGroup: FormGroup) {\r\n    let val;\r\n    let valid = true;\r\n\r\n    for (let key in formGroup.controls) {\r\n      if (formGroup.controls.hasOwnProperty(key)) {\r\n        let control: FormControl = <FormControl>formGroup.controls[key];\r\n\r\n        if (val === undefined) {\r\n          val = control.value\r\n        } else {\r\n          if (val !== control.value) {\r\n            valid = false;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (valid) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      areEqual: true\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}